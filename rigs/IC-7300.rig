version = 1;

impl Transceiver for IC7300 {
    enum Vfo {
        A = 0,
        B = 1,
        // Dummy value
        Unknown = 0xFF,
    }

    enum Mode {
        LSB = 0,
        USB = 1,
        AM = 2,
        CWL = 3,
        DIGIL = 4,
        FM = 5,
        CWU = 7,
        DIGIU = 8,
    }

    init {
        write("FEFE94E0.1A050053.00.FD");
        read("FEFE94E01A05005300FD.FEFEE094FBFD");
        write("FEFE94E0.1A050075.01.FD");
        read("FEFE94E01A05007501FD.FEFEE094FBFD");
        write("FEFE94E0.1A050071.00.FD");
        read("FEFE94E01A05007100FD.FEFEE094FBFD");
    }

    fn set_freq(int freq, Vfo target) {
        write("FEFE94E0.25.{target:1}.{freq:bcd_lu:5}.FD");
        read("FEFE94E025{_:6}FD.FEFEE094FBFD");
    }

    fn clear_rit() {
        write("FEFE94E0.21.00000000.FD");
        read("FEFE94E02100000000FD.FEFEE094FBFD");
    }

    fn cw_pitch(int pitch) {
        pitch = (pitch - 127.5) * 0.425;
        write("FEFE94E0.14.09.{pitch:bcd_bu:2}.FD");
        read("FEFE94E014090000FD.FEFEE094FBFD");
    }

    fn set_split(bool split) {
        write("FEFE94E0.0F.{split:1}.FD");
        read("FEFE94E00F00FD.FEFEE094FBFD");
    }

    fn vfo_equal() {
        write("FEFE94E0.07A0.FD");
        read("FEFE94E007A0FD.FEFEE094FBFD");
    }

    fn vfo_swap() {
        write("FEFE94E0.07B0.FD");
        read("FEFE94E007B0FD.FEFEE094FBFD");
    }

    fn set_vfo(Vfo rx, Vfo tx) {
        if rx == Vfo::Unknown && tx == Vfo::Unknown {
            error(s"Both VFOs cannot be unknown");
        } else if rx == Vfo::Unknown {
            write("FEFE94E0.0700.FD");
            read("FEFE94E00700FD.FEFEE094FBFD");
        } else if tx == Vfo::Unknown {
            write("FEFE94E0.0701.FD");
            read("FEFE94E00701FD.FEFEE094FBFD");
        } else if rx == Vfo::A && tx == Vfo::A {
            write("FEFE94E0.0700.FD.FEFE94E0.0F00.FD");
            read("FEFE94E00700FD.FEFE94E00F00FD.FEFEE094FBFD");
        } else if rx == Vfo::A && tx == Vfo::B {
            write("FEFE94E0.0700.FD.FEFE94E0.0F01.FD");
            read("FEFE94E00700FD.FEFE94E00F00FD.FEFEE094FBFD");
        } else if rx == Vfo::B && tx == Vfo::A {
            write("FEFE94E0.0701.FD.FEFE94E0.0F01.FD");
            read("FEFE94E00701FD.FEFE94E00F01FD.FEFEE094FBFD");
        } else if rx == Vfo::B && tx == Vfo::B {
            write("FEFE94E0.0701.FD.FEFE94E0.0F00.FD");
            read("FEFE94E00701FD.FEFE94E00F00FD.FEFEE094FBFD");
        }
    }

    fn set_rit(bool rit) {
        write("FEFE94E0.21.01.{rit:1}.FD");
        read("FEFE94E02101{_:1}FD.FEFEE094FBFD");
    }

    fn set_xit(bool xit) {
        write("FEFE94E0.21.02.{xit:1}.FD");
        read("FEFE94E02102{_:1}FD.FEFEE094FBFD");
    }

    fn transmit(bool tx) {
        write("FEFE94E0.1C00.{tx:1}.FD");
        read("FEFE94E01C00{_:1}FD.FEFEE094FBFD");
    }

    fn set_mode(Mode mode) {
        write("FEFE94E0.06.{mode:1}.FD");
        read("FEFE94E006{_:1}FD.FEFEE094FBFD");
    }

    status {
        write("FEFE94E0.2500.FD");
        read("FEFE94E02500FD.FEFEE094.2500.{freq_a:bcd_lu:5}.FD");
        set_var(s"freq_a", freq_a);

        write("FEFE94E0.2501.FD");
        read("FEFE94E02501FD.FEFEE094.2501.{freq_b:bcd_lu:5}.FD");
        set_var(s"freq_b", freq_b);

        write("FEFE94E0.04.FD");
        read("FEFE94E004FD.FEFEE094.04.{mode:2}.FD");
        set_var(s"mode", mode);

        // write("FEFE94E0.1409.FD");
        // read("FEFE94E01409FD.FEFEE094.1409.{pitch:bcd_bu:2}.FD");
        // set_var(s"cw_pitch", (pitch * 2.362205) + 300);

        write("FEFE94E0.1C00.FD");
        read("FEFE94E01C00FD.FEFEE094.1C00.{transmit:1}.FD");
        set_var(s"transmit", transmit);

        write("FEFE94E0.2101.FD");
        read("FEFE94E02101FD.FEFEE094.2101.{rit:1}.FD");
        set_var(s"rit", rit);

        write("FEFE94E0.2102.FD");
        read("FEFE94E02102FD.FEFEE094.2102.{xit:1}.FD");
        set_var(s"xit", xit);

        // Missing duplicated status 6 and 7 from the original file
    }
}
